ADTs & Justification
We used the Queue ADT in order to store Plane objects within the Runway objects. Planes must be accessed in a FIFO order by the AirportSystem, so naturally choosing Queue made the most sense. We chose to use a circular singularly-linked structure implementation (QueueCSLS) in order to save on memory usage. Queueing and dequeueing of Planes is the most frequent operation performed in the program, so choosing an efficient implementation was important.
We used the List ADT in order to store Runways in a collection, store Planes that are waiting to be re-entered into a runway in a collection, and also store Plane flight numbers (Strings) in a collection. This is because these collections must be searched through by user input when choosing to close a Runway, specifying a plane to re-enter into a runway, and checking whether a Plane already exists when a new Plane is created. A resizable array-based implementation (ListRAB) is used in order to save on memory usage by the internal array, since the majority of operations on it will be using direct index access.

Menu Options and Data Flow
0. Exit program.
    Sets loop variable to false.
1. Plane enters the system.
    Collects input to create a Plane, sends new Plane to AirportSystem, which verifies flightNumber and Runway against existing values.
    Most frequent operation is expected to be .get().
2. Plane attempts takes off.
    Peeks the next available plane for takeoff, and collects whether it can takeoff. Send that permission input to a method in AirportSystem that dequeues the plane and either moves that plane to the waiting List, or removes it from the Runway and the activeFlights List, then increments takeoff tracking int. Most frequent operation is expected to be .get().
3. Plane is allowed to re-enter a runway.
    Takes input of a plane flightNumber, verifies in activeFlights of AirportSystem, then moves from waiting List to itâ€™s designate Runway. Most frequent operation is expected to be .get().
4. Runway opens.
    Takes input of a Runway name, verifies against existing runway, and then adds to the List of Runway in AirportSystem if able. Most frequent operation is expected to be .get().
5. Runway closes.
    Takes input of runway name, temporarily calls the runway, dequeues all Planes in both Queues, and also scans through the waiting List to assign new Runways to each. The deletes the Runway. Most frequent operation is expected to be .dequeue().
6. Display info about planes waiting to take off.
    Outputs toString() data from each Runway and Plane. No significant operations.
7. Display info about planes waiting to be allowed to re-enter a runway.
Outputs toString() data from the waiting List and each Plane. No significant operations.
8. Display number of planes who have taken off.
    Outputs toString() of number of planes taken off. No significant operations.
9. Plane attemps landing.
Peeks the next available plane for landingf, and collects whether it can do so. Send that permission input to a method in AirportSystem that dequeues the plane and either moves that plane to the waiting List, or removes it from the Runway and the activeFlights List, then increments landing tracking int. Most frequent operation is expected to be .get().
10. Display info about planes waiting to land.
    Outputs toString() data from each Runway and Plane. No significant operations.
11. Display number of planes who have landed.
    Outputs toString() of number of planes that have landed. No significant operations.



